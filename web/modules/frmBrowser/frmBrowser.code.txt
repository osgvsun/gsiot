var self = this;Form.call(this, name);this.app = app; this.parent = app.parent;this.Timer = null;
this.load = function () {
    self = this.app.Forms[this.Name];
    this.tmpl = this.app.path + "/frmBrowser/frmBrowser.txt";
    this.PublicServation = this.app.station.PublicServation;
    this.LoadData(false);
};
this.Form_Show = function () {self.app.Forms.activeForm = this;if (this.Timer==null) {this.Timer=setInterval(this.task,60000);}};
this.Form_Resize = function (w, h) { };
this.Form_Receive = function (data) {
    console.log(this.Name + " receive:" + JSON.stringify(data))
    if (data.cmd == "show library id") {
    } else if (data.type == "event_auth") {
        if (data.code = 200) {
            this.app.cfg.policy.username = data.data.username;
            this.app.cfg.policy.cname = data.data.cname;
        }
    }
};
this.LoadData=function(flag){
    this.dataurl = this.app.rootpath + this.app.api.showlibrary;
    if (this.PublicServation) {
        file = new JsonFile(this.app.rootpath + this.app.api.share_record)
        var now = new Date().Format("yyyy-MM-dd hh:mm:ss")
        if (file.isEmpty || file.data.InspectionRecord[0].datetime.endtime < now) {
            console.log(this.app.api.makeshare.LoadJson());
            file.Readfile();
        }
    }
    if(flag==null && this.app.Forms.activeForm.Name==this.Name)self.Show();
};
this.task=function(){
    if(self.binddata!=null && "result" in self.binddata){
        self.binddata.result.ForEach(function(item,index){  
            if(item!=null){
                if(item.InspectionRecord.length==0){delete self.binddata.result[index];console.log("刷新页面");self.LoadData();
                }else{item.InspectionRecord.ForEach(function(record){record.datetime.now=new Date().Format("yyyy-MM-dd hh:mm:ss");record.datetime.flag=record.datetime.endtime<record.datetime.now;if(record.datetime.flag){console.log("刷新页面");self.LoadData();}})}
            }               
        })
    }else console.log(self.binddata);
};
this.cmdInspection_Click = function (CourseID, ExperimentID, starttime, endtime) {
    if (CourseID == null || CourseID == "share") {
        file = new JsonFile(this.app.rootpath + this.app.api.share_record)
        with (this.app.cfg.policy) { courseid = "share"; experimentid = "01"; InspectionRecord = file.data.InspectionRecord[0] }
        App.frmInspection.Show();
    } else {
        console.log("policy:" + JSON.stringify(App.data.policy))
        var now = new Date().Format("yyyy-MM-dd hh:mm:ss")
        if (starttime < now && now < endtime) {
            if (this.app.cfg.policy.username == "") {
                with (this.app.cfg.policy) { courseid = CourseID; experimentid = ExperimentID; start = starttime; end = endtime }
                App.frmLogin.Show();
            } else this.CheckPolicy();
        } else if (starttime > now) {
            msgbox("预约时间为\n" + starttime + "\n至\n" + endtime + "\n,该预约没有开始", 3)
        } else if (endtime < now) {
            msgbox("预约时间为\n" + starttime + "\n至\n" + endtime + "\n,预约已结束", 3)
        }
    }
};
this.CheckPolicy = function () {
    var start = this.app.cfg.policy.start,
        end = this.app.cfg.policy.end,
        devindex = this.app.cfg.release.device.id + "_"
            + this.app.cfg.policy.courseid + "_"
            + this.app.cfg.policy.experimentid;
    console.log("starttime:" + start)
    console.log("endtime:" + end)
    console.log("CourseID:" + this.app.cfg.policy.courseid)
    console.log("ExperimentID:" + this.app.cfg.policy.experimentid)
    console.log("devindex:" + devindex)

    this.app.cfg.policy.data.ForEach(function (policy, index) {
        if (policy.devindex == App.data.cfg.release.device.id || policy.devindex == devindex) {
            url = App.rootpath + "/api/showlibraryid/<username>/<course>/<experiment>"
                .replace("<username>", this.app.cfg.policy.username)
                .replace("<course>", this.app.cfg.policy.courseid)
                .replace("<experiment>", this.app.cfg.policy.experimentid)
            result = url.LoadJson();
            // App.frmWork.binddata = {"data":result}
            App.frmWork.Show();
        } else { console.log(policy.devindex); }
    })
};